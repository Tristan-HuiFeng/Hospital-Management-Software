//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Hospital_Management_Software.MyDBServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyDBServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WCF_Service_Library.CompositeType GetDataUsingDataContract(WCF_Service_Library.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.CompositeType> GetDataUsingDataContractAsync(WCF_Service_Library.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEquipmentServiceRecordById", ReplyAction="http://tempuri.org/IService1/GetEquipmentServiceRecordByIdResponse")]
        WCF_Service_Library.Entity.EquipmentServiceRecord GetEquipmentServiceRecordById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEquipmentServiceRecordById", ReplyAction="http://tempuri.org/IService1/GetEquipmentServiceRecordByIdResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.EquipmentServiceRecord> GetEquipmentServiceRecordByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEquipmentServiceRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetEquipmentServiceRecordByEmployeeIDResponse")]
        WCF_Service_Library.Entity.EquipmentServiceRecord[] GetEquipmentServiceRecordByEmployeeID(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEquipmentServiceRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetEquipmentServiceRecordByEmployeeIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.EquipmentServiceRecord[]> GetEquipmentServiceRecordByEmployeeIDAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabServiceRecordById", ReplyAction="http://tempuri.org/IService1/GetLabServiceRecordByIdResponse")]
        WCF_Service_Library.Entity.LabServiceRecord GetLabServiceRecordById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabServiceRecordById", ReplyAction="http://tempuri.org/IService1/GetLabServiceRecordByIdResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.LabServiceRecord> GetLabServiceRecordByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabServiceRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetLabServiceRecordByEmployeeIDResponse")]
        WCF_Service_Library.Entity.LabServiceRecord[] GetLabServiceRecordByEmployeeID(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLabServiceRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetLabServiceRecordByEmployeeIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.LabServiceRecord[]> GetLabServiceRecordByEmployeeIDAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetAllMedicalRecordByEmployeeIDResponse")]
        WCF_Service_Library.Entity.MedicalRecord[] GetAllMedicalRecordByEmployeeID(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetAllMedicalRecordByEmployeeIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord[]> GetAllMedicalRecordByEmployeeIDAsync(int empID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalRecordByID", ReplyAction="http://tempuri.org/IService1/GetMedicalRecordByIDResponse")]
        WCF_Service_Library.Entity.MedicalRecord GetMedicalRecordByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalRecordByID", ReplyAction="http://tempuri.org/IService1/GetMedicalRecordByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord> GetMedicalRecordByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalRecord", ReplyAction="http://tempuri.org/IService1/GetAllMedicalRecordResponse")]
        WCF_Service_Library.Entity.MedicalRecord[] GetAllMedicalRecord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMedicalRecord", ReplyAction="http://tempuri.org/IService1/GetAllMedicalRecordResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord[]> GetAllMedicalRecordAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalRecordTableView", ReplyAction="http://tempuri.org/IService1/GetMedicalRecordTableViewResponse")]
        System.Data.DataTable GetMedicalRecordTableView();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMedicalRecordTableView", ReplyAction="http://tempuri.org/IService1/GetMedicalRecordTableViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMedicalRecordTableViewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountInformation", ReplyAction="http://tempuri.org/IService1/GetAccountInformationResponse")]
        string[] GetAccountInformation(string LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAccountInformation", ReplyAction="http://tempuri.org/IService1/GetAccountInformationResponse")]
        System.Threading.Tasks.Task<string[]> GetAccountInformationAsync(string LoginID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleUserListTableView", ReplyAction="http://tempuri.org/IService1/GetRoleUserListTableViewResponse")]
        System.Data.DataTable GetRoleUserListTableView(string role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleUserListTableView", ReplyAction="http://tempuri.org/IService1/GetRoleUserListTableViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRoleUserListTableViewAsync(string role_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList", ReplyAction="http://tempuri.org/IService1/GetRoleListResponse")]
        WCF_Service_Library.Entity.Role[] GetRoleList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList", ReplyAction="http://tempuri.org/IService1/GetRoleListResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role[]> GetRoleListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList2", ReplyAction="http://tempuri.org/IService1/GetRoleList2Response")]
        WCF_Service_Library.Entity.Role[] GetRoleList2();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList2", ReplyAction="http://tempuri.org/IService1/GetRoleList2Response")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role[]> GetRoleList2Async();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList_TableView", ReplyAction="http://tempuri.org/IService1/GetRoleList_TableViewResponse")]
        System.Data.DataTable GetRoleList_TableView();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleList_TableView", ReplyAction="http://tempuri.org/IService1/GetRoleList_TableViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetRoleList_TableViewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleByID", ReplyAction="http://tempuri.org/IService1/GetRoleByIDResponse")]
        WCF_Service_Library.Entity.Role GetRoleByID(string roleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetRoleByID", ReplyAction="http://tempuri.org/IService1/GetRoleByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role> GetRoleByIDAsync(string roleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserAccountByID", ReplyAction="http://tempuri.org/IService1/GetUserAccountByIDResponse")]
        WCF_Service_Library.Entity.UserAccount GetUserAccountByID(string user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserAccountByID", ReplyAction="http://tempuri.org/IService1/GetUserAccountByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.UserAccount> GetUserAccountByIDAsync(string user_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUserAccStatus", ReplyAction="http://tempuri.org/IService1/updateUserAccStatusResponse")]
        void updateUserAccStatus(string userID, bool isDisabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateUserAccStatus", ReplyAction="http://tempuri.org/IService1/updateUserAccStatusResponse")]
        System.Threading.Tasks.Task updateUserAccStatusAsync(string userID, bool isDisabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoAccUserList_TableView", ReplyAction="http://tempuri.org/IService1/GetNoAccUserList_TableViewResponse")]
        System.Data.DataTable GetNoAccUserList_TableView();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNoAccUserList_TableView", ReplyAction="http://tempuri.org/IService1/GetNoAccUserList_TableViewResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetNoAccUserList_TableViewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/creationDetailsByEmpID", ReplyAction="http://tempuri.org/IService1/creationDetailsByEmpIDResponse")]
        string[] creationDetailsByEmpID(string emp_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/creationDetailsByEmpID", ReplyAction="http://tempuri.org/IService1/creationDetailsByEmpIDResponse")]
        System.Threading.Tasks.Task<string[]> creationDetailsByEmpIDAsync(string emp_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateAccountCreationDetails", ReplyAction="http://tempuri.org/IService1/updateAccountCreationDetailsResponse")]
        void updateAccountCreationDetails(string asp_id, string emp_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateAccountCreationDetails", ReplyAction="http://tempuri.org/IService1/updateAccountCreationDetailsResponse")]
        System.Threading.Tasks.Task updateAccountCreationDetailsAsync(string asp_id, string emp_id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAccountList", ReplyAction="http://tempuri.org/IService1/getAccountListResponse")]
        System.Data.DataTable getAccountList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAccountList", ReplyAction="http://tempuri.org/IService1/getAccountListResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> getAccountListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmpIDByAccID", ReplyAction="http://tempuri.org/IService1/GetEmpIDByAccIDResponse")]
        int GetEmpIDByAccID(string accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmpIDByAccID", ReplyAction="http://tempuri.org/IService1/GetEmpIDByAccIDResponse")]
        System.Threading.Tasks.Task<int> GetEmpIDByAccIDAsync(string accID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailList", ReplyAction="http://tempuri.org/IService1/GetEmailListResponse")]
        System.Data.DataTable GetEmailList(string target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailList", ReplyAction="http://tempuri.org/IService1/GetEmailListResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetEmailListAsync(string target);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployee", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeResponse")]
        WCF_Service_Library.Entity.Employee[] GetAllEmployee();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllEmployee", ReplyAction="http://tempuri.org/IService1/GetAllEmployeeResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetAllEmployeeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByName", ReplyAction="http://tempuri.org/IService1/GetEmployeeByNameResponse")]
        WCF_Service_Library.Entity.Employee[] GetEmployeeByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByName", ReplyAction="http://tempuri.org/IService1/GetEmployeeByNameResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeSortedByDOB", ReplyAction="http://tempuri.org/IService1/GetEmployeeSortedByDOBResponse")]
        WCF_Service_Library.Entity.Employee[] GetEmployeeSortedByDOB(int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeSortedByDOB", ReplyAction="http://tempuri.org/IService1/GetEmployeeSortedByDOBResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeSortedByDOBAsync(int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeSortedByGender", ReplyAction="http://tempuri.org/IService1/GetEmployeeSortedByGenderResponse")]
        WCF_Service_Library.Entity.Employee[] GetEmployeeSortedByGender(int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeSortedByGender", ReplyAction="http://tempuri.org/IService1/GetEmployeeSortedByGenderResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeSortedByGenderAsync(int order);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByNRIC", ReplyAction="http://tempuri.org/IService1/GetEmployeeByNRICResponse")]
        WCF_Service_Library.Entity.Employee[] GetEmployeeByNRIC(string nric);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeByNRIC", ReplyAction="http://tempuri.org/IService1/GetEmployeeByNRICResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeByNRICAsync(string nric);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateEmployee", ReplyAction="http://tempuri.org/IService1/CreateEmployeeResponse")]
        int CreateEmployee(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateEmployee", ReplyAction="http://tempuri.org/IService1/CreateEmployeeResponse")]
        System.Threading.Tasks.Task<int> CreateEmployeeAsync(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployee", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeResponse")]
        int UpdateEmployee(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateEmployee", ReplyAction="http://tempuri.org/IService1/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task<int> UpdateEmployeeAsync(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeID", ReplyAction="http://tempuri.org/IService1/GetEmployeeIDResponse")]
        string GetEmployeeID(string nric);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmployeeID", ReplyAction="http://tempuri.org/IService1/GetEmployeeIDResponse")]
        System.Threading.Tasks.Task<string> GetEmployeeIDAsync(string nric);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateContract", ReplyAction="http://tempuri.org/IService1/CreateContractResponse")]
        int CreateContract(string salary, string benefits, string workingHours, string holidays, string vacation, System.DateTime create_date, string employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateContract", ReplyAction="http://tempuri.org/IService1/CreateContractResponse")]
        System.Threading.Tasks.Task<int> CreateContractAsync(string salary, string benefits, string workingHours, string holidays, string vacation, System.DateTime create_date, string employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContractByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetContractByEmployeeIDResponse")]
        WCF_Service_Library.Entity.ContractRecord[] GetContractByEmployeeID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContractByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetContractByEmployeeIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.ContractRecord[]> GetContractByEmployeeIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientByID", ReplyAction="http://tempuri.org/IService1/GetPatientByIDResponse")]
        WCF_Service_Library.Entity.tempPatient GetPatientByID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientByID", ReplyAction="http://tempuri.org/IService1/GetPatientByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.tempPatient> GetPatientByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMedicalRecord", ReplyAction="http://tempuri.org/IService1/CreateMedicalRecordResponse")]
        int CreateMedicalRecord(string bloodPressure, string respirationRate, string bodyTemperature, string pulseRate, string diagnosis, string treatment, System.DateTime consultationDate, int doctorID, int patientID, string prescription, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMedicalRecord", ReplyAction="http://tempuri.org/IService1/CreateMedicalRecordResponse")]
        System.Threading.Tasks.Task<int> CreateMedicalRecordAsync(string bloodPressure, string respirationRate, string bodyTemperature, string pulseRate, string diagnosis, string treatment, System.DateTime consultationDate, int doctorID, int patientID, string prescription, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatientRecords", ReplyAction="http://tempuri.org/IService1/GetAllPatientRecordsResponse")]
        WCF_Service_Library.Entity.PatientRecord[] GetAllPatientRecords();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPatientRecords", ReplyAction="http://tempuri.org/IService1/GetAllPatientRecordsResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.PatientRecord[]> GetAllPatientRecordsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientRecordByID", ReplyAction="http://tempuri.org/IService1/GetPatientRecordByIDResponse")]
        WCF_Service_Library.Entity.PatientRecord GetPatientRecordByID(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPatientRecordByID", ReplyAction="http://tempuri.org/IService1/GetPatientRecordByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.PatientRecord> GetPatientRecordByIDAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePatientRecord", ReplyAction="http://tempuri.org/IService1/CreatePatientRecordResponse")]
        int CreatePatientRecord(
                    int patientid, 
                    string firstname, 
                    string lastname, 
                    string NRIC, 
                    System.DateTime DOB, 
                    string sex, 
                    string nationality, 
                    string citizenship, 
                    string postalcode, 
                    string address, 
                    string allergies, 
                    string medicalhistory, 
                    string phonenumber, 
                    string homenumber, 
                    string email, 
                    System.DateTime createdDate, 
                    System.DateTime updateDate, 
                    string recordDisabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePatientRecord", ReplyAction="http://tempuri.org/IService1/CreatePatientRecordResponse")]
        System.Threading.Tasks.Task<int> CreatePatientRecordAsync(
                    int patientid, 
                    string firstname, 
                    string lastname, 
                    string NRIC, 
                    System.DateTime DOB, 
                    string sex, 
                    string nationality, 
                    string citizenship, 
                    string postalcode, 
                    string address, 
                    string allergies, 
                    string medicalhistory, 
                    string phonenumber, 
                    string homenumber, 
                    string email, 
                    System.DateTime createdDate, 
                    System.DateTime updateDate, 
                    string recordDisabled);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisablePatientByID", ReplyAction="http://tempuri.org/IService1/DisablePatientByIDResponse")]
        int DisablePatientByID(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DisablePatientByID", ReplyAction="http://tempuri.org/IService1/DisablePatientByIDResponse")]
        System.Threading.Tasks.Task<int> DisablePatientByIDAsync(int patientID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePatientByID", ReplyAction="http://tempuri.org/IService1/UpdatePatientByIDResponse")]
        int UpdatePatientByID(
                    int patientID, 
                    string fname, 
                    string lname, 
                    string nric, 
                    string sex, 
                    System.DateTime dob, 
                    string nationality, 
                    string citizenship, 
                    string postalCode, 
                    string address, 
                    string allergies, 
                    string medicalHistory, 
                    string phoneNumber, 
                    string homeNumber, 
                    string email, 
                    System.DateTime update_date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdatePatientByID", ReplyAction="http://tempuri.org/IService1/UpdatePatientByIDResponse")]
        System.Threading.Tasks.Task<int> UpdatePatientByIDAsync(
                    int patientID, 
                    string fname, 
                    string lname, 
                    string nric, 
                    string sex, 
                    System.DateTime dob, 
                    string nationality, 
                    string citizenship, 
                    string postalCode, 
                    string address, 
                    string allergies, 
                    string medicalHistory, 
                    string phoneNumber, 
                    string homeNumber, 
                    string email, 
                    System.DateTime update_date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBankRecord", ReplyAction="http://tempuri.org/IService1/CreateBankRecordResponse")]
        int CreateBankRecord(string bankName, string bankAccountNumber, string bankHolderName, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateBankRecord", ReplyAction="http://tempuri.org/IService1/CreateBankRecordResponse")]
        System.Threading.Tasks.Task<int> CreateBankRecordAsync(string bankName, string bankAccountNumber, string bankHolderName, int employeeID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBankRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetBankRecordByEmployeeIDResponse")]
        WCF_Service_Library.Entity.BankRecord[] GetBankRecordByEmployeeID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBankRecordByEmployeeID", ReplyAction="http://tempuri.org/IService1/GetBankRecordByEmployeeIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.BankRecord[]> GetBankRecordByEmployeeIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePayroll", ReplyAction="http://tempuri.org/IService1/CreatePayrollResponse")]
        int CreatePayroll(decimal salary, decimal bonusAmount, string processedDate, System.DateTime createdDate, int employeeID, int bankDetailID, string processed, string overtimeDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreatePayroll", ReplyAction="http://tempuri.org/IService1/CreatePayrollResponse")]
        System.Threading.Tasks.Task<int> CreatePayrollAsync(decimal salary, decimal bonusAmount, string processedDate, System.DateTime createdDate, int employeeID, int bankDetailID, string processed, string overtimeDetails);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBankDetailID", ReplyAction="http://tempuri.org/IService1/GetBankDetailIDResponse")]
        string GetBankDetailID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetBankDetailID", ReplyAction="http://tempuri.org/IService1/GetBankDetailIDResponse")]
        System.Threading.Tasks.Task<string> GetBankDetailIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPayroll", ReplyAction="http://tempuri.org/IService1/GetAllPayrollResponse")]
        WCF_Service_Library.Entity.PayrollRecord[] GetAllPayroll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllPayroll", ReplyAction="http://tempuri.org/IService1/GetAllPayrollResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetAllPayrollAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayrollByID", ReplyAction="http://tempuri.org/IService1/GetPayrollByIDResponse")]
        WCF_Service_Library.Entity.PayrollRecord[] GetPayrollByID(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayrollByID", ReplyAction="http://tempuri.org/IService1/GetPayrollByIDResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetPayrollByIDAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessPayrollByID", ReplyAction="http://tempuri.org/IService1/ProcessPayrollByIDResponse")]
        int ProcessPayrollByID(string id, string process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessPayrollByID", ReplyAction="http://tempuri.org/IService1/ProcessPayrollByIDResponse")]
        System.Threading.Tasks.Task<int> ProcessPayrollByIDAsync(string id, string process);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayrollBetweenDate", ReplyAction="http://tempuri.org/IService1/GetPayrollBetweenDateResponse")]
        WCF_Service_Library.Entity.PayrollRecord[] GetPayrollBetweenDate(string firstDate, string secondDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetPayrollBetweenDate", ReplyAction="http://tempuri.org/IService1/GetPayrollBetweenDateResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetPayrollBetweenDateAsync(string firstDate, string secondDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllFeedback", ReplyAction="http://tempuri.org/IService1/GetAllFeedbackResponse")]
        WCF_Service_Library.Entity.FeedbackList[] GetAllFeedback();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllFeedback", ReplyAction="http://tempuri.org/IService1/GetAllFeedbackResponse")]
        System.Threading.Tasks.Task<WCF_Service_Library.Entity.FeedbackList[]> GetAllFeedbackAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFeedback", ReplyAction="http://tempuri.org/IService1/CreateFeedbackResponse")]
        int CreateFeedback(string name, string email, string subject, string feedback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateFeedback", ReplyAction="http://tempuri.org/IService1/CreateFeedbackResponse")]
        System.Threading.Tasks.Task<int> CreateFeedbackAsync(string name, string email, string subject, string feedback);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : Hospital_Management_Software.MyDBServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<Hospital_Management_Software.MyDBServiceReference.IService1>, Hospital_Management_Software.MyDBServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WCF_Service_Library.CompositeType GetDataUsingDataContract(WCF_Service_Library.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.CompositeType> GetDataUsingDataContractAsync(WCF_Service_Library.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public WCF_Service_Library.Entity.EquipmentServiceRecord GetEquipmentServiceRecordById(int id) {
            return base.Channel.GetEquipmentServiceRecordById(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.EquipmentServiceRecord> GetEquipmentServiceRecordByIdAsync(int id) {
            return base.Channel.GetEquipmentServiceRecordByIdAsync(id);
        }
        
        public WCF_Service_Library.Entity.EquipmentServiceRecord[] GetEquipmentServiceRecordByEmployeeID(int empID) {
            return base.Channel.GetEquipmentServiceRecordByEmployeeID(empID);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.EquipmentServiceRecord[]> GetEquipmentServiceRecordByEmployeeIDAsync(int empID) {
            return base.Channel.GetEquipmentServiceRecordByEmployeeIDAsync(empID);
        }
        
        public WCF_Service_Library.Entity.LabServiceRecord GetLabServiceRecordById(int id) {
            return base.Channel.GetLabServiceRecordById(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.LabServiceRecord> GetLabServiceRecordByIdAsync(int id) {
            return base.Channel.GetLabServiceRecordByIdAsync(id);
        }
        
        public WCF_Service_Library.Entity.LabServiceRecord[] GetLabServiceRecordByEmployeeID(int empID) {
            return base.Channel.GetLabServiceRecordByEmployeeID(empID);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.LabServiceRecord[]> GetLabServiceRecordByEmployeeIDAsync(int empID) {
            return base.Channel.GetLabServiceRecordByEmployeeIDAsync(empID);
        }
        
        public WCF_Service_Library.Entity.MedicalRecord[] GetAllMedicalRecordByEmployeeID(int empID) {
            return base.Channel.GetAllMedicalRecordByEmployeeID(empID);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord[]> GetAllMedicalRecordByEmployeeIDAsync(int empID) {
            return base.Channel.GetAllMedicalRecordByEmployeeIDAsync(empID);
        }
        
        public WCF_Service_Library.Entity.MedicalRecord GetMedicalRecordByID(int id) {
            return base.Channel.GetMedicalRecordByID(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord> GetMedicalRecordByIDAsync(int id) {
            return base.Channel.GetMedicalRecordByIDAsync(id);
        }
        
        public WCF_Service_Library.Entity.MedicalRecord[] GetAllMedicalRecord() {
            return base.Channel.GetAllMedicalRecord();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.MedicalRecord[]> GetAllMedicalRecordAsync() {
            return base.Channel.GetAllMedicalRecordAsync();
        }
        
        public System.Data.DataTable GetMedicalRecordTableView() {
            return base.Channel.GetMedicalRecordTableView();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMedicalRecordTableViewAsync() {
            return base.Channel.GetMedicalRecordTableViewAsync();
        }
        
        public string[] GetAccountInformation(string LoginID) {
            return base.Channel.GetAccountInformation(LoginID);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAccountInformationAsync(string LoginID) {
            return base.Channel.GetAccountInformationAsync(LoginID);
        }
        
        public System.Data.DataTable GetRoleUserListTableView(string role_id) {
            return base.Channel.GetRoleUserListTableView(role_id);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRoleUserListTableViewAsync(string role_id) {
            return base.Channel.GetRoleUserListTableViewAsync(role_id);
        }
        
        public WCF_Service_Library.Entity.Role[] GetRoleList() {
            return base.Channel.GetRoleList();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role[]> GetRoleListAsync() {
            return base.Channel.GetRoleListAsync();
        }
        
        public WCF_Service_Library.Entity.Role[] GetRoleList2() {
            return base.Channel.GetRoleList2();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role[]> GetRoleList2Async() {
            return base.Channel.GetRoleList2Async();
        }
        
        public System.Data.DataTable GetRoleList_TableView() {
            return base.Channel.GetRoleList_TableView();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetRoleList_TableViewAsync() {
            return base.Channel.GetRoleList_TableViewAsync();
        }
        
        public WCF_Service_Library.Entity.Role GetRoleByID(string roleID) {
            return base.Channel.GetRoleByID(roleID);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Role> GetRoleByIDAsync(string roleID) {
            return base.Channel.GetRoleByIDAsync(roleID);
        }
        
        public WCF_Service_Library.Entity.UserAccount GetUserAccountByID(string user_id) {
            return base.Channel.GetUserAccountByID(user_id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.UserAccount> GetUserAccountByIDAsync(string user_id) {
            return base.Channel.GetUserAccountByIDAsync(user_id);
        }
        
        public void updateUserAccStatus(string userID, bool isDisabled) {
            base.Channel.updateUserAccStatus(userID, isDisabled);
        }
        
        public System.Threading.Tasks.Task updateUserAccStatusAsync(string userID, bool isDisabled) {
            return base.Channel.updateUserAccStatusAsync(userID, isDisabled);
        }
        
        public System.Data.DataTable GetNoAccUserList_TableView() {
            return base.Channel.GetNoAccUserList_TableView();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetNoAccUserList_TableViewAsync() {
            return base.Channel.GetNoAccUserList_TableViewAsync();
        }
        
        public string[] creationDetailsByEmpID(string emp_id) {
            return base.Channel.creationDetailsByEmpID(emp_id);
        }
        
        public System.Threading.Tasks.Task<string[]> creationDetailsByEmpIDAsync(string emp_id) {
            return base.Channel.creationDetailsByEmpIDAsync(emp_id);
        }
        
        public void updateAccountCreationDetails(string asp_id, string emp_id) {
            base.Channel.updateAccountCreationDetails(asp_id, emp_id);
        }
        
        public System.Threading.Tasks.Task updateAccountCreationDetailsAsync(string asp_id, string emp_id) {
            return base.Channel.updateAccountCreationDetailsAsync(asp_id, emp_id);
        }
        
        public System.Data.DataTable getAccountList() {
            return base.Channel.getAccountList();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getAccountListAsync() {
            return base.Channel.getAccountListAsync();
        }
        
        public int GetEmpIDByAccID(string accID) {
            return base.Channel.GetEmpIDByAccID(accID);
        }
        
        public System.Threading.Tasks.Task<int> GetEmpIDByAccIDAsync(string accID) {
            return base.Channel.GetEmpIDByAccIDAsync(accID);
        }
        
        public System.Data.DataTable GetEmailList(string target) {
            return base.Channel.GetEmailList(target);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetEmailListAsync(string target) {
            return base.Channel.GetEmailListAsync(target);
        }
        
        public WCF_Service_Library.Entity.Employee[] GetAllEmployee() {
            return base.Channel.GetAllEmployee();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetAllEmployeeAsync() {
            return base.Channel.GetAllEmployeeAsync();
        }
        
        public WCF_Service_Library.Entity.Employee[] GetEmployeeByName(string name) {
            return base.Channel.GetEmployeeByName(name);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeByNameAsync(string name) {
            return base.Channel.GetEmployeeByNameAsync(name);
        }
        
        public WCF_Service_Library.Entity.Employee[] GetEmployeeSortedByDOB(int order) {
            return base.Channel.GetEmployeeSortedByDOB(order);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeSortedByDOBAsync(int order) {
            return base.Channel.GetEmployeeSortedByDOBAsync(order);
        }
        
        public WCF_Service_Library.Entity.Employee[] GetEmployeeSortedByGender(int order) {
            return base.Channel.GetEmployeeSortedByGender(order);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeSortedByGenderAsync(int order) {
            return base.Channel.GetEmployeeSortedByGenderAsync(order);
        }
        
        public WCF_Service_Library.Entity.Employee[] GetEmployeeByNRIC(string nric) {
            return base.Channel.GetEmployeeByNRIC(nric);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.Employee[]> GetEmployeeByNRICAsync(string nric) {
            return base.Channel.GetEmployeeByNRICAsync(nric);
        }
        
        public int CreateEmployee(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image) {
            return base.Channel.CreateEmployee(nric, firstname, lastname, email, dob, gender, address, department, position, nationality, healthdeclaration, loginid, password, jobfunction, image);
        }
        
        public System.Threading.Tasks.Task<int> CreateEmployeeAsync(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image) {
            return base.Channel.CreateEmployeeAsync(nric, firstname, lastname, email, dob, gender, address, department, position, nationality, healthdeclaration, loginid, password, jobfunction, image);
        }
        
        public int UpdateEmployee(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image) {
            return base.Channel.UpdateEmployee(nric, firstname, lastname, email, dob, gender, address, department, position, nationality, healthdeclaration, loginid, password, jobfunction, image);
        }
        
        public System.Threading.Tasks.Task<int> UpdateEmployeeAsync(string nric, string firstname, string lastname, string email, System.DateTime dob, char gender, string address, string department, string position, string nationality, string healthdeclaration, string loginid, string password, string jobfunction, string image) {
            return base.Channel.UpdateEmployeeAsync(nric, firstname, lastname, email, dob, gender, address, department, position, nationality, healthdeclaration, loginid, password, jobfunction, image);
        }
        
        public string GetEmployeeID(string nric) {
            return base.Channel.GetEmployeeID(nric);
        }
        
        public System.Threading.Tasks.Task<string> GetEmployeeIDAsync(string nric) {
            return base.Channel.GetEmployeeIDAsync(nric);
        }
        
        public int CreateContract(string salary, string benefits, string workingHours, string holidays, string vacation, System.DateTime create_date, string employeeID) {
            return base.Channel.CreateContract(salary, benefits, workingHours, holidays, vacation, create_date, employeeID);
        }
        
        public System.Threading.Tasks.Task<int> CreateContractAsync(string salary, string benefits, string workingHours, string holidays, string vacation, System.DateTime create_date, string employeeID) {
            return base.Channel.CreateContractAsync(salary, benefits, workingHours, holidays, vacation, create_date, employeeID);
        }
        
        public WCF_Service_Library.Entity.ContractRecord[] GetContractByEmployeeID(string id) {
            return base.Channel.GetContractByEmployeeID(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.ContractRecord[]> GetContractByEmployeeIDAsync(string id) {
            return base.Channel.GetContractByEmployeeIDAsync(id);
        }
        
        public WCF_Service_Library.Entity.tempPatient GetPatientByID(string id) {
            return base.Channel.GetPatientByID(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.tempPatient> GetPatientByIDAsync(string id) {
            return base.Channel.GetPatientByIDAsync(id);
        }
        
        public int CreateMedicalRecord(string bloodPressure, string respirationRate, string bodyTemperature, string pulseRate, string diagnosis, string treatment, System.DateTime consultationDate, int doctorID, int patientID, string prescription, string remarks) {
            return base.Channel.CreateMedicalRecord(bloodPressure, respirationRate, bodyTemperature, pulseRate, diagnosis, treatment, consultationDate, doctorID, patientID, prescription, remarks);
        }
        
        public System.Threading.Tasks.Task<int> CreateMedicalRecordAsync(string bloodPressure, string respirationRate, string bodyTemperature, string pulseRate, string diagnosis, string treatment, System.DateTime consultationDate, int doctorID, int patientID, string prescription, string remarks) {
            return base.Channel.CreateMedicalRecordAsync(bloodPressure, respirationRate, bodyTemperature, pulseRate, diagnosis, treatment, consultationDate, doctorID, patientID, prescription, remarks);
        }
        
        public WCF_Service_Library.Entity.PatientRecord[] GetAllPatientRecords() {
            return base.Channel.GetAllPatientRecords();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.PatientRecord[]> GetAllPatientRecordsAsync() {
            return base.Channel.GetAllPatientRecordsAsync();
        }
        
        public WCF_Service_Library.Entity.PatientRecord GetPatientRecordByID(int patientID) {
            return base.Channel.GetPatientRecordByID(patientID);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.PatientRecord> GetPatientRecordByIDAsync(int patientID) {
            return base.Channel.GetPatientRecordByIDAsync(patientID);
        }
        
        public int CreatePatientRecord(
                    int patientid, 
                    string firstname, 
                    string lastname, 
                    string NRIC, 
                    System.DateTime DOB, 
                    string sex, 
                    string nationality, 
                    string citizenship, 
                    string postalcode, 
                    string address, 
                    string allergies, 
                    string medicalhistory, 
                    string phonenumber, 
                    string homenumber, 
                    string email, 
                    System.DateTime createdDate, 
                    System.DateTime updateDate, 
                    string recordDisabled) {
            return base.Channel.CreatePatientRecord(patientid, firstname, lastname, NRIC, DOB, sex, nationality, citizenship, postalcode, address, allergies, medicalhistory, phonenumber, homenumber, email, createdDate, updateDate, recordDisabled);
        }
        
        public System.Threading.Tasks.Task<int> CreatePatientRecordAsync(
                    int patientid, 
                    string firstname, 
                    string lastname, 
                    string NRIC, 
                    System.DateTime DOB, 
                    string sex, 
                    string nationality, 
                    string citizenship, 
                    string postalcode, 
                    string address, 
                    string allergies, 
                    string medicalhistory, 
                    string phonenumber, 
                    string homenumber, 
                    string email, 
                    System.DateTime createdDate, 
                    System.DateTime updateDate, 
                    string recordDisabled) {
            return base.Channel.CreatePatientRecordAsync(patientid, firstname, lastname, NRIC, DOB, sex, nationality, citizenship, postalcode, address, allergies, medicalhistory, phonenumber, homenumber, email, createdDate, updateDate, recordDisabled);
        }
        
        public int DisablePatientByID(int patientID) {
            return base.Channel.DisablePatientByID(patientID);
        }
        
        public System.Threading.Tasks.Task<int> DisablePatientByIDAsync(int patientID) {
            return base.Channel.DisablePatientByIDAsync(patientID);
        }
        
        public int UpdatePatientByID(
                    int patientID, 
                    string fname, 
                    string lname, 
                    string nric, 
                    string sex, 
                    System.DateTime dob, 
                    string nationality, 
                    string citizenship, 
                    string postalCode, 
                    string address, 
                    string allergies, 
                    string medicalHistory, 
                    string phoneNumber, 
                    string homeNumber, 
                    string email, 
                    System.DateTime update_date) {
            return base.Channel.UpdatePatientByID(patientID, fname, lname, nric, sex, dob, nationality, citizenship, postalCode, address, allergies, medicalHistory, phoneNumber, homeNumber, email, update_date);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePatientByIDAsync(
                    int patientID, 
                    string fname, 
                    string lname, 
                    string nric, 
                    string sex, 
                    System.DateTime dob, 
                    string nationality, 
                    string citizenship, 
                    string postalCode, 
                    string address, 
                    string allergies, 
                    string medicalHistory, 
                    string phoneNumber, 
                    string homeNumber, 
                    string email, 
                    System.DateTime update_date) {
            return base.Channel.UpdatePatientByIDAsync(patientID, fname, lname, nric, sex, dob, nationality, citizenship, postalCode, address, allergies, medicalHistory, phoneNumber, homeNumber, email, update_date);
        }
        
        public int CreateBankRecord(string bankName, string bankAccountNumber, string bankHolderName, int employeeID) {
            return base.Channel.CreateBankRecord(bankName, bankAccountNumber, bankHolderName, employeeID);
        }
        
        public System.Threading.Tasks.Task<int> CreateBankRecordAsync(string bankName, string bankAccountNumber, string bankHolderName, int employeeID) {
            return base.Channel.CreateBankRecordAsync(bankName, bankAccountNumber, bankHolderName, employeeID);
        }
        
        public WCF_Service_Library.Entity.BankRecord[] GetBankRecordByEmployeeID(int id) {
            return base.Channel.GetBankRecordByEmployeeID(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.BankRecord[]> GetBankRecordByEmployeeIDAsync(int id) {
            return base.Channel.GetBankRecordByEmployeeIDAsync(id);
        }
        
        public int CreatePayroll(decimal salary, decimal bonusAmount, string processedDate, System.DateTime createdDate, int employeeID, int bankDetailID, string processed, string overtimeDetails) {
            return base.Channel.CreatePayroll(salary, bonusAmount, processedDate, createdDate, employeeID, bankDetailID, processed, overtimeDetails);
        }
        
        public System.Threading.Tasks.Task<int> CreatePayrollAsync(decimal salary, decimal bonusAmount, string processedDate, System.DateTime createdDate, int employeeID, int bankDetailID, string processed, string overtimeDetails) {
            return base.Channel.CreatePayrollAsync(salary, bonusAmount, processedDate, createdDate, employeeID, bankDetailID, processed, overtimeDetails);
        }
        
        public string GetBankDetailID(string id) {
            return base.Channel.GetBankDetailID(id);
        }
        
        public System.Threading.Tasks.Task<string> GetBankDetailIDAsync(string id) {
            return base.Channel.GetBankDetailIDAsync(id);
        }
        
        public WCF_Service_Library.Entity.PayrollRecord[] GetAllPayroll() {
            return base.Channel.GetAllPayroll();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetAllPayrollAsync() {
            return base.Channel.GetAllPayrollAsync();
        }
        
        public WCF_Service_Library.Entity.PayrollRecord[] GetPayrollByID(string id) {
            return base.Channel.GetPayrollByID(id);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetPayrollByIDAsync(string id) {
            return base.Channel.GetPayrollByIDAsync(id);
        }
        
        public int ProcessPayrollByID(string id, string process) {
            return base.Channel.ProcessPayrollByID(id, process);
        }
        
        public System.Threading.Tasks.Task<int> ProcessPayrollByIDAsync(string id, string process) {
            return base.Channel.ProcessPayrollByIDAsync(id, process);
        }
        
        public WCF_Service_Library.Entity.PayrollRecord[] GetPayrollBetweenDate(string firstDate, string secondDate) {
            return base.Channel.GetPayrollBetweenDate(firstDate, secondDate);
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.PayrollRecord[]> GetPayrollBetweenDateAsync(string firstDate, string secondDate) {
            return base.Channel.GetPayrollBetweenDateAsync(firstDate, secondDate);
        }
        
        public WCF_Service_Library.Entity.FeedbackList[] GetAllFeedback() {
            return base.Channel.GetAllFeedback();
        }
        
        public System.Threading.Tasks.Task<WCF_Service_Library.Entity.FeedbackList[]> GetAllFeedbackAsync() {
            return base.Channel.GetAllFeedbackAsync();
        }
        
        public int CreateFeedback(string name, string email, string subject, string feedback) {
            return base.Channel.CreateFeedback(name, email, subject, feedback);
        }
        
        public System.Threading.Tasks.Task<int> CreateFeedbackAsync(string name, string email, string subject, string feedback) {
            return base.Channel.CreateFeedbackAsync(name, email, subject, feedback);
        }
    }
}
